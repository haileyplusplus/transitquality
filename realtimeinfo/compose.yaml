# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  rtfrontend:
    build:
      context: ..
      dockerfile: realtimeinfo/Dockerfile-frontend
    network_mode: service:transit-realtimeinfo-sidecar
    depends_on:
      transit-realtimeinfo-sidecar:
        condition: service_started
    #develop:
    #  watch:
    #    - action: rebuild
    #      path: ../realtime
  rtbackend:
    build:
      context: ..
      dockerfile: realtimeinfo/Dockerfile-backend
    network_mode: service:transit-realtimeinfo-sidecar
    depends_on:
      transit-realtimeinfo-sidecar:
        condition: service_started
    develop:
      watch:
        - action: rebuild
          path: ../realtime
  transit-realtimeinfo-sidecar:
    image: tailscale/tailscale:latest
    container_name: ts-transit-realtimeinfo
    hostname: businfo
    environment:
      - TS_AUTHKEY=tskey-auth-kyhNRZiosi11CNTRL-EnHCSi8Hgq1HcC84oHd1r1qMTEnmWoM7F
      - TS_SERVE_CONFIG=/config/serve-transit-realtimeinfo.json
      - TS_STATE_DIR=/var/lib/tailscale
    volumes:
      - transit-realtimeinfo-tailscale-state:/var/lib/tailscale
      - ${PWD}/tsconfig:/config
    devices:
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - net_admin
      - sys_module
    restart: unless-stopped

volumes:
  transit-realtimeinfo-tailscale-state:
