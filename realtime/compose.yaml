# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  rtserver:
    build:
      context: ..
      dockerfile: realtime/Dockerfile
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 900M
    #volumes:
    #  - ~/transit/bustracker/raw/getpatterns:/patterns
    develop:
      watch:
        - action: rebuild
          path: .
    network_mode: service:transit-realtime-sidecar
    depends_on:
      db:
        condition: service_healthy
      transit-realtime-sidecar:
        condition: service_started
      memstore:
        condition: service_started
    restart: always
  memstore:
    image: redis/redis-stack:latest
    network_mode: service:transit-realtime-sidecar
  valhalla:
    image: ghcr.io/gis-ops/docker-valhalla/valhalla:latest
    volumes:
      - ~/projects/valhalla/data:/custom_files
    network_mode: service:transit-realtime-sidecar
    depends_on:
      transit-realtime-sidecar:
        condition: service_started
    restart: always
  db:
     build:
       context: postgis
     restart: always
     user: postgres
     volumes:
       - db-data:/var/lib/postgresql/data
     network_mode: service:transit-realtime-sidecar
     environment:
       - POSTGRES_SERVER=db
       - POSTGRES_DB=rttransitstate
       - POSTGRES_PASSWORD=rttransit
     #ports:
     #  - 5432:5432
     healthcheck:
       test: [ "CMD", "pg_isready" ]
       interval: 10s
       timeout: 5s
       retries: 5
     depends_on:
       transit-realtime-sidecar:
         condition: service_started
  # Prometheus and cadvisor configs based on sample at
  # https://prometheus.io/docs/guides/cadvisor/#monitoring-docker-container-metrics-using-cadvisor
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    network_mode: service:transit-realtime-sidecar
    #ports:
    #- 9090:9090
    command:
    - --config.file=/etc/prometheus/prometheus.yml
    volumes:
    - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
    - cadvisor
    - transit-realtime-sidecar
  prometheus-blackbox:
    image: quay.io/prometheus/blackbox-exporter:latest
    container_name: prometheus-blackbox
    network_mode: service:transit-realtime-sidecar
    command:
    - --config.file=/config/blackbox.yml
    volumes:
    - ./blackbox.yml:/config/blackbox.yml:ro
    depends_on:
    - transit-realtime-sidecar
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    #ports:
    #- 8080:8080
    volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:rw
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro
    network_mode: service:transit-realtime-sidecar
    depends_on:
    - memstore
    - transit-realtime-sidecar
  grafana:
    image: grafana/grafana-oss
    container_name: grafana
    restart: unless-stopped
    #ports:
    #  - '3000:3000'
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_BASIC_ENABLED=false
    volumes:
      - grafana-storage:/var/lib/grafana
    network_mode: service:transit-realtime-sidecar
    depends_on:
    - transit-realtime-sidecar
  transit-realtime-sidecar:
    image: tailscale/tailscale:latest
    container_name: ts-transit-realtime
    hostname: rttransit
    env_file:
      - path: ~/.config/tailscale/ts-authkey
        required: true
    environment:
      - TS_STATE_DIR=/var/lib/tailscale
    volumes:
      - transit-realtime-tailscale-state:/var/lib/tailscale
      - ${PWD}/tsconfig:/config
    devices:
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - net_admin
      - sys_module
    restart: unless-stopped

volumes:
  transit-realtime-tailscale-state:
  db-data:
  grafana-storage:
